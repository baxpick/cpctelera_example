# Prepare stage
# ########################################################################################

FROM alpine:latest AS builder

# Build argument - only available during docker build
ARG FOLDER_ROOT

# Convert to ENV to make it available during RUN and in final container
ENV MYTOOLS="${FOLDER_ROOT}/retro/projects/mytools"

# Ensure the directory exists
RUN mkdir -p "${MYTOOLS}"

# Install necessary packages (for cpctelera)
RUN \
    ARCH=$(arch) && \
    if [[ ${ARCH} == "aarch64" ]] || [[ ${ARCH} == "arm64" ]]; then \
        echo "@community http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories && \
        apk update && \
        apk add --no-cache mono@community mono-dev@community; \
    elif [[ ${ARCH} == "x86_64" ]] || [[ ${ARCH} == "amd64" ]]; then \
        echo "@community http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories && \
        apk update && \
        apk add --no-cache mono@community mono-dev@community; \
    else \
        echo "ERROR: Unsupported architecture: ${ARCH}" && \
        exit 1; \
    fi && \
    apk add --no-cache \
        bash \
        git wget zip \
        g++ make curl \
        bison flex boost-dev freeimage-dev \
        bc util-linux graphicsmagick xxd python3 jq mesa-dev gettext-dev \
        patch \
        gettext-static \
        musl-dev \
        perl

# prepare cpctelera source for CPC
RUN cd "${MYTOOLS}" && \
    git clone -b enterprise-port https://github.com/baxpick/cpctelera-enterprise.git && \
    rm -rf cpctelera-enterprise/.git && \
    perl -i -p -e 's/.equ HARDWARE_CPC.*/.equ HARDWARE_CPC , 1/g' cpctelera-enterprise/cpctelera/CPCteleraHW.src && \
    perl -i -p -e 's/.equ HARDWARE_ENTERPRISE.*/.equ HARDWARE_ENTERPRISE , 0/g' cpctelera-enterprise/cpctelera/CPCteleraHW.src && \
    mv cpctelera-enterprise cpctelera-linux-cpc

# build cpctelera for CPC
RUN cd "${MYTOOLS}/cpctelera-linux-cpc" && \
    ./setup.sh

# clean cpctelera
RUN for platform in cpc; do \
    FOLDER_CPCTELERA="${MYTOOLS}/cpctelera-linux-${platform}"; \
    FOLDER_SDCC=$(find "${FOLDER_CPCTELERA}"/cpctelera/tools -name 'sdcc*' -type d -maxdepth 1); \
    find "${FOLDER_CPCTELERA}" -name 'obj' -type d -exec rm -rf {} \; ;\
    rm -rf "${FOLDER_CPCTELERA}"/examples; \
    rm -rf "${FOLDER_CPCTELERA}"/cpctelera/docs; \
    rm -rf "${FOLDER_SDCC}"/src; \
    cd "${FOLDER_SDCC}/share/sdcc/lib"; \
    find . -maxdepth 1 ! -name 'z80' ! -name '.' ! -name 'src' -exec rm -rf {} \; ;\
    cd "${FOLDER_SDCC}/share/sdcc/lib/src"; \
    find . -maxdepth 1 ! -name 'z80' ! -name '.' -type d -exec rm -rf {} \; ;\
    rm -rf "${FOLDER_CPCTELERA}"/cpctelera/tools/android; \
    rm -rf "${FOLDER_CPCTELERA}"/cpctelera/tools/img2cpc/lib; \
done

# Final stage
# ########################################################################################

FROM alpine:latest

# Build argument (only available during build)
ARG FOLDER_ROOT

# Converting to ENV to make it available at runtime
ENV FOLDER_PROJECTS="${FOLDER_ROOT}/retro/projects"
ENV MYTOOLS="${FOLDER_PROJECTS}/mytools"

# Copy only required folders from builder
COPY --from=builder ${MYTOOLS}/cpctelera-linux-cpc ${MYTOOLS}/cpctelera-linux-cpc/

# Install runtime dependencies only
RUN apk add --no-cache \
    bash \
    perl \
    dos2unix \
    grep \
    coreutils \
    make \
    freeimage-dev \
    bc \
    util-linux \
    graphicsmagick \
    xxd \
    python3 \
    jq \
    git \
    file

# Minimize image even more
RUN rm -rf /var/cache/apk/*

# Copy the new generic entrypoint script
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

COPY build_cpctelera_project_from_container.sh ${FOLDER_PROJECTS}

ENV BUILD_PLATFORM="cpc"
ENTRYPOINT ["/entrypoint.sh"]
